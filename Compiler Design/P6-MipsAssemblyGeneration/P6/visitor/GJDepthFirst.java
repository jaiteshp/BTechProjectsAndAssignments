//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   public int v1;
   public int v2;
   public int v3;
   public String procName;
   public String moveReg;
   public String moveReg1;
   public String sr1;
   public boolean insideStmtList = false;
   public boolean insideStmt = false;
   public boolean insideCall = false;
   public boolean insideHallocate = false;
   public boolean insideCallSimpleExp = false;
   public boolean insideBinopSimpleExp = false;


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {

      n.f1.accept(this, argu);
      v1 = Integer.parseInt((String) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      v2 = Integer.parseInt((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      v3 = Integer.parseInt((String) n.f8.accept(this, argu));
      n.f9.accept(this, argu);

      int num = (v2 - max(v1-4,0))*4 + (max(v3-4,0)*4) + 8;
      num = num - 4;

      R _ret=null;
      n.f0.accept(this, argu);
      procName = "main";
      println(".text");
      println(".globl " + procName);
      printlnNoTab(procName + ":");
      println("move $fp, $sp");
      //subuhere
      println("subu $sp, $sp, " + Integer.toString(num));
      println("sw $ra, -4($fp)");


      insideStmtList = true;
      n.f10.accept(this, argu);
      insideStmtList = false;

      println("lw $ra, -4($fp)");
      //addu here
      println("addu $sp, $sp, " + Integer.toString(num));
      println("jr $ra");
      println(" ");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      printlnNoTab("\t.text\n" +
              "\t.globl\t_halloc\n" +
              "_halloc:\n" +
              "\tli $v0, 9\n" +
              "\tsyscall\n" +
              "\tjr $ra\n" +
              "\n" +
              "\t.text\n" +
              "\t.globl\t_print\n" +
              "_print:\n" +
              "\tli $v0, 1\n" +
              "\tsyscall\n" +
              "\tla $a0, newl\n" +
              "\tli $v0, 4\n" +
              "\tsyscall\n" +
              "\tjr $ra\n" +
              "\n" +
              "\t.data\n" +
              "\t.align   0\n" +
              "newl:   .asciiz \"\\n\"\n" +
              "\t.data\n" +
              "\t.align   0\n" +
              "str_er: .asciiz \" ERROR: abnormal termination\\n \"");

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      n.f1.accept(this, argu);
      v1 = Integer.parseInt((String) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      v2 = Integer.parseInt((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      v3 = Integer.parseInt((String) n.f8.accept(this, argu));
      n.f9.accept(this, argu);

      int num = (v2 - max(v1-4,0))*4 + (max(v3-4,0)*4) + 8;

      R _ret=null;
      procName = (String) n.f0.accept(this, argu);
      println(".text");
      println(".globl " + procName);
      printlnNoTab(procName + ":");
      println("sw $fp, -8($sp)");
      println("move $fp, $sp");
      //subuhere
      println("subu $sp, $sp, " + Integer.toString(num));
      println("sw $ra, -4($fp)");



      insideStmtList = true;
      n.f10.accept(this, argu);
      insideStmtList = false;

      println("lw $ra, -4($fp)");
      println("lw $fp, " + Integer.toString(num-8) + "($sp)");
      //addu here
      println("addu $sp, $sp, " + Integer.toString(num));
      println("jr $ra");
      println(" ");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      insideStmt = true;
      n.f0.accept(this, argu);
      insideStmt = false;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      println("li $v0 4\n" +
              "\tla $a0, str_er\n" +
              "\tsyscall\n" +
              "\tli $v0, 10\n" +
              "\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String l1 = (String) n.f2.accept(this, argu);
      println("beqz " + d(r1) + " " + l1);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String l1 = (String) n.f1.accept(this, argu);
      println("b " + l1);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String i1 = (String) n.f2.accept(this, argu);
      String r2 = (String) n.f3.accept(this, argu);
      println("sw " + d(r2) + ", " + i1 + "(" + d(r1) + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String r2 = (String) n.f2.accept(this, argu);
      String i1 = (String) n.f3.accept(this, argu);
      println("lw " + d(r1) + ", " + i1 + "(" + d(r2) + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      moveReg = r1;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      println("move " + d("a0") + " " + d(s1));
      println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      sr1 = (String) n.f1.accept(this, argu);
      if(isSRegister(sr1))  n.f2.accept(this, (A) "loads");
      else n.f2.accept(this, (A) "loadt");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      sr1 = (String) n.f2.accept(this, argu);
      if(isSRegister(sr1))  n.f1.accept(this, (A) "stores");
      else n.f1.accept(this, (A) "storet");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      String s1 = (String) argu;
      n.f0.accept(this, argu);
      String i1 = (String) n.f1.accept(this, argu);
      int i11 = Integer.parseInt(i1);
      i11--;
      String r1 = (String) n.f2.accept(this, argu);


      println("sw " + d(r1) + ", " + Integer.toString(i11*4) + "(" + d("sp") + ")");

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      insideCall = true;
      n.f1.accept(this, argu);
      insideCall = false;
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which == 0)
      {
         insideHallocate = true;
         n.f0.accept(this,argu);
         insideHallocate = false;
      }
      else if(n.f0.which == 1)
      {
         n.f0.accept(this,argu);
      }
      else if(n.f0.which == 2)
      {
         insideCallSimpleExp = true;
         n.f0.accept(this,argu);
         insideCallSimpleExp = false;
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      moveReg1 = (String) n.f1.accept(this, argu);

      insideBinopSimpleExp = true;
      String r1 = (String) n.f2.accept(this, argu);
      insideBinopSimpleExp = false;

      if(op.equals("LE"))
      {
         println("sle " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }
      else if(op.equals("NE"))
      {
         println("sne " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }
      else if(op.equals("PLUS"))
      {
         println("add " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }
      else if(op.equals("MINUS"))
      {
         println("sub " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }
      else if(op.equals("TIMES"))
      {
         println("mul " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }
      else if(op.equals("DIV"))
      {
         println("div " + d(moveReg) + ", " + d(moveReg1) + ", " + r1);
      }

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      if(n.f0.which == 0)  return (R) "LE";
      else if(n.f0.which == 1)  return (R) "NE";
      else if(n.f0.which == 2)  return (R) "PLUS";
      else if(n.f0.which == 3)  return (R) "MINUS";
      else if(n.f0.which == 4)  return (R) "TIMES";
      else if(n.f0.which == 5)  return (R) "DIV";

      return (R) "DIFFERENT OPERATOR";
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      String s1 = (String) argu;
      n.f0.accept(this, argu);
      String i1 = (String) n.f1.accept(this, argu);
      int i11 = Integer.parseInt(i1);

      int offset = max(v1-4,0);
      int offset1 = offset*4;
      int offset2 = max(v3-4, 0);
//      println("530, offset is " + Integer.toString(offset));

      if(offset > 0)
      {
         if(i11 < offset)
         {
            if(s1.equals("stores"))
            {
               //println("533, pos is: " + Integer.toString(4*i11) + " + " + Integer.toString(offset));
               println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("fp") + ")");
            }
            else if(s1.equals("storet"))
            {
               println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("fp") + ")");
            }
            else if(s1.equals("loads"))
            {
               println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("fp") + ")");
            }
            else if(s1.equals("loadt"))
            {
               println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("fp") + ")");
            }
            return _ret;
         }
      }

      i11 = i11 - offset;
      i11 = i11 + offset2;

      if(s1.equals("stores"))
      {
         //println("533, pos is: " + Integer.toString(4*i11) + " + " + Integer.toString(offset));
         println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
      }
      else if(s1.equals("storet"))
      {
         println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
      }
      else if(s1.equals("loads"))
      {
         println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
      }
      else if(s1.equals("loadt"))
      {
         println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
      }


//      if(s1.equals("stores"))
//      {
//         println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
//      }
//      else if(s1.equals("storet"))
//      {
//         println("sw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
//      }
//      else if(s1.equals("loads"))
//      {
//         println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
//      }
//      else if(s1.equals("loadt"))
//      {
//         println("lw " + d(sr1) + ", " + Integer.toString(4*i11) + "(" + d("sp") + ")");
//      }

      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      if(insideBinopSimpleExp)
      {
         String s1;
         if(n.f0.which == 0)
         {
            s1 = d((String) n.f0.accept(this,argu));
            _ret = (R) s1;
         }
         else
         {
            s1 = (String) n.f0.accept(this,argu);
            _ret = (R) s1;
         }
         return _ret;
      }

      if(insideCallSimpleExp)
      {
         if(n.f0.which == 0)
         {
            String r1 = (String) n.f0.accept(this, argu);
            println("move " + d(moveReg) + ", " + d(r1));
         }
         else if(n.f0.which == 1)
         {
            String i1 = (String) n.f0.accept(this,argu);
            println("li " + d(moveReg) + ", " + i1);
         }
         else if(n.f0.which == 2)
         {
            String l1 = (String) n.f0.accept(this,argu);
            println("la " + d(moveReg) + ", " + l1);
         }
         return _ret;
      }


      if(insideHallocate)
      {
         if(n.f0.which == 0)
         {
            String r1 = (String) n.f0.accept(this,argu);
            println("move $a0, " + d(r1));
            println("jal _halloc");
            println("move " + d(moveReg) + ", " + d("v0"));
         }
         else if(n.f0.which == 1)
         {
            String i1 = (String) n.f0.accept(this, argu);
            int i11 = Integer.parseInt(i1);
            println("li $a0, " + i1);
            println("jal _halloc");
            println("move " + d(moveReg) + ", " + d("v0"));
         }
         else if(n.f0.which == 2)
         {
            println("502, must be a number or register.");
         }
         return _ret;
      }

      if(insideCall)
      {
         if(n.f0.which == 0)
         {
            String r1 = (String) n.f0.accept(this,argu);
            println("jalr " + d(r1));
         }
         else if(n.f0.which == 2)
         {
            String l1 = (String) n.f0.accept(this, argu);
            println("jal " + l1);
         }
         return _ret;
      }

      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String r1;
      int regNum = n.f0.which;

      switch(regNum)
      {
         case 0: r1 = "a0";   break;
         case 1: r1 = "a1";   break;
         case 2: r1 = "a2";   break;
         case 3: r1 = "a3";   break;
         case 4: r1 = "t0";   break;
         case 5: r1 = "t1";   break;
         case 6: r1 = "t2";   break;
         case 7: r1 = "t3";   break;
         case 8: r1 = "t4";   break;
         case 9: r1 = "t5";   break;
         case 10: r1 = "t6";   break;
         case 11: r1 = "t7";   break;
         case 12: r1 = "s0";   break;
         case 13: r1 = "s1";   break;
         case 14: r1 = "s2";   break;
         case 15: r1 = "s3";   break;
         case 16: r1 = "s4";   break;
         case 17: r1 = "s5";   break;
         case 18: r1 = "s6";   break;
         case 19: r1 = "s7";   break;
         case 20: r1 = "t8";   break;
         case 21: r1 = "t9";   break;
         case 22: r1 = "v0";   break;
         case 23: r1 = "v1";   break;
         default: r1 = "newRegister"; break;
      }

      _ret = (R) r1;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String) n.f0.toString();
      _ret =(R) s;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String) n.f0.toString();
      if(insideStmtList && !insideStmt)   printlnNoTab(s + ":");
      _ret =(R) s;
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   public boolean isSRegister(String s)
   {
      if(s.equals("s0") || s.equals("s1") || s.equals("s2") || s.equals("s3") || s.equals("s4") || s.equals("s5") || s.equals("s6") || s.equals("s7"))   return true;
      else return false;
   }

   public String d(String s)   {      return ("$" + s);   }
   public void print(String s)   {      System.out.print(s);   }
   public void println(String s)   {      System.out.println("\t" + s);   }
   public void printlnNoTab(String s)   {      System.out.println(s);   }
   public int max(int a, int b)
   {
      if(a >= b)  return a;
      else return b;
   }

}
