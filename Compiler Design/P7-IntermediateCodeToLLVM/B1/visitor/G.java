//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class G<R,A> implements GJVisitor<R,A> {

//   public Hashtable <String,String> cm0 = new Hashtable <String,String> ();    //class name vs parent's class name
//   public Hashtable <String, Hashtable <String, String>> cm1 = new Hashtable <String, Hashtable <String, String>> ();
//   public Hashtable <String, Hashtable <String, String>> cm1c = new Hashtable <String, Hashtable <String, String>> ();
   public Hashtable <String, Hashtable <String, Hashtable <String, String>>> cm2 = new Hashtable <String, Hashtable<String, Hashtable<String,String>>> ();
//   public Hashtable <String, Hashtable <String, Hashtable <String, String>>> cm2c = new Hashtable <String, Hashtable<String, Hashtable<String,String>>> ();
//   public Hashtable <String, String> cmd = new Hashtable <String, String> ();    //Contains classes for which accumulation is done
   public Hashtable <String, Hashtable <String, String>> cm1c = new Hashtable <String, Hashtable <String, String>> ();
   public Hashtable <String, String> cm3 = new Hashtable <String, String>();     //Contains c~m vs methodOffset
   public Hashtable <String, Hashtable <String,String>> cm3f = new Hashtable <String ,Hashtable <String, String>> ();
   public Hashtable <String, String> cm4 = new Hashtable <String, String> ();    //Final for fields, methVars
   public Hashtable <String, String> cm44 = new Hashtable <String, String> ();    //NEW Final for fields, methVars
   public Hashtable <String, String> cm44t = new Hashtable <String, String> ();    //NEW Final for the types of fields, methVars
   public Hashtable <String, String> classMap = new Hashtable <String, String> ();    //class vs parent class
   public Hashtable <String, Integer> classSize = new Hashtable <String, Integer> ();  //C vs class size for calloc.
   public Hashtable <String, Hashtable<String, String>> classMethMap = new Hashtable<String, Hashtable<String, String>>();    //C~OriginalMethods in it.
   public Hashtable <String,String> varMap = new Hashtable <String,String> ();   //For C~M~V, C~V
   public Hashtable <String,String> methRetMap = new Hashtable <String,String> (); //For C~M, ~Rtype
   public Hashtable <String,String> methParamMap = new Hashtable <String,String> (); //For C~M, ~P1type~P2type~P3type..
   public Hashtable <String, String> methParamCountMap = new Hashtable<String, String>();   //C~M vs no of (params + 1)
   public Hashtable <String, Hashtable <String, String>> cm5 = new Hashtable <String, Hashtable <String, String>>(); // C~M -> methOffset.
   public Hashtable <String, Hashtable <String, String>> cm55 = new Hashtable <String, Hashtable <String, String>>(); // C~M -> methOffset.
   public Hashtable <String, String> signatureMap = new Hashtable <String, String> (); //keys are same as methParam or methRet, values are corresponding method signatures.
   public Hashtable <String, String> regTypes = new Hashtable <String, String> ();  //Tells the type of the register. %num vs i smth. cleared after each method.
   public Hashtable <String, String> nonFieldTypes = new Hashtable <String, String> (); //C~M~V vs their i type.
   public Hashtable <String, String> fieldTypes = new Hashtable <String, String> (); //C~V vs their i type.

   public Hashtable <String, String> fo = new Hashtable <String, String> ();
   public Hashtable <String, String> vt = new Hashtable <String, String> ();
   public Hashtable <String, Hashtable <String, String>> mvt = new Hashtable <String, Hashtable <String, String>> ();
   boolean isFormalParam = false;
   boolean IdentIsVarDecl = false;
   boolean isMsgSnd = false;
   boolean isMsgSndPexp = false;
   boolean isAssignIdent = false;
   boolean isArrLkp = false;
   boolean isInAssignExp = false;
   boolean isInMesgSendParam = false;

   public String mainClassName;
   public String className = "";
   public String extendedClassName = "";
   public String methName = "";
   public String varName = "";
//   public int varOffCount = 0;
   public int tempCount;
   public int labCount = 1;
   int tabs = 0;

   public int regCount = 0;
   public int ifCount = 0;
   public int loopCount = 0;
   public String formalParameterCache = "";
   public boolean inClassVarDeclaration = false;
   public String methParamCache = "";
//   public int argTempCount = 0;

   public void build_signatureMap()
   {
      Set <String> cmkeys = methParamMap.keySet();

      for(String cm : cmkeys)
      {
         String[] arr1 = cm.split("~");
         String c1 = arr1[0];
         String m1 = arr1[1];

         String[] arr2 = methParamMap.get(cm).split("~");
         int sz = arr2.length;

         String r = "i8* bitcast (";

         String retType = methRetMap.get(cm);
         if(retType.equals("int"))  r += "i32 ";
         else if(retType.equals("int[]"))   r += "i8* ";      //Does this happen??(returning an array?)
         else if(retType.equals("boolean"))   r += "i1 ";
         else  r += "i8* ";

         r += "(";

         for(int i = 0; i < sz; i++)
         {
            if(i != 0) r += ", ";
            String pType = arr2[i];

            if(pType.equals("int"))   r += "i32";
            else if(pType.equals("int[]"))    r += "i8*";      //Does this happen??(array as parameter?)
            else if(pType.equals("boolean"))   r += "i1";
            else  r += "i8*";
         }

         r += ")* @" + getParentWithMethod(c1, m1) + "." + m1 + " to i8*)";

         signatureMap.put(cm,r);
      }
   }

   public String getParentWithMethod(String c, String m)
   {
      String c1 = c;

      while (true)
      {
         if(cm2.get(c1).containsKey(m))   return c1;
         else c1 = classMap.get(c1);
      }
   }

   public void build_cm55()
   {
      Set <String> ckeys = cm5.keySet();

      for(String c : ckeys)
      {
         Set <String> mkeys = cm5.get(c).keySet();

         for(String m : mkeys)
         {
            int val = Integer.parseInt(cm5.get(c).get(m));
            cm5.get(c).put(m, Integer.toString(2*val));
         }
         Hashtable <String, String> ht = new Hashtable <String, String> (cm5.get(c));
         cm55.put(c,ht);
      }
      return;
   }

   public void build_cm44()
   {
      Set <String> ccckeys = classMap.keySet();
      for(String c : ccckeys) classSize.put(c,8);
      Set<String> ckeys = cm4.keySet();
      Hashtable<String, Hashtable<String, Integer>> cm7 = new Hashtable<String, Hashtable<String, Integer>>();
      Hashtable<String, Hashtable<String, Integer>> cm77 = new Hashtable<String, Hashtable<String, Integer>>();
      Hashtable<String, String> intermediate1 = new Hashtable<String, String>();

      for (String c : ckeys) {
         String val = cm4.get(c);
         if (isInteger(val)) {
            intermediate1.put(c, val);
         }
      }

      Set<String> ckeys1 = intermediate1.keySet();

      for (String c : ckeys1) {
         String[] result = c.split("~");
         String c1 = result[0];
         String v1 = result[1];
         String t1 = getObjType(c1, v1);
         cm44t.put(c, t1);

         if (cm7.containsKey(c1)) (cm7.get(c1)).put(v1, Integer.parseInt(cm4.get(c)));
         else {
            Hashtable<String, Integer> tmp1 = new Hashtable<String, Integer>();
            cm7.put(c1, tmp1);
            (cm7.get(c1)).put(v1, Integer.parseInt(cm4.get(c)));
         }
      }

      Set<String> ckeys2 = cm7.keySet();

      for (String c : ckeys2)
      {
         Hashtable<String, Integer> ht1 = new Hashtable<String, Integer>(cm7.get(c));
         Hashtable<String, Integer> ht2 = new Hashtable<String, Integer>();
         cm77.put(c, ht2);

         Set<String> vkeys = ht1.keySet();
         Hashtable<Integer, String> revHt1 = new Hashtable<Integer, String>();

         for (String v : vkeys) revHt1.put(ht1.get(v), v);
         int sz = revHt1.size();
         int acc = 8;

         classSize.put(c,acc);
         for (int i = 4; i <= sz * 4; i = i + 4)
         {
            String v = revHt1.get(i);
            String typ = getObjType(c, v);

            if (typ == "int")
            {
               cm77.get(c).put(v, acc);
               cm44.put(st2(c, v), Integer.toString(acc));
               acc += 4;
            }
            else if (typ.equals("int[]"))
            {
               cm77.get(c).put(v, acc);
               cm44.put(st2(c, v), Integer.toString(acc));
               acc += 8;
            }
            else if (typ.equals("boolean"))
            {
               cm77.get(c).put(v, acc);
               cm44.put(st2(c, v), Integer.toString(acc));
               acc += 1;
            }
            else
            {
               cm77.get(c).put(v, acc);
               cm44.put(st2(c, v), Integer.toString(acc));
               acc += 8;
            }
            classSize.put(c, acc);
         }
      }
   }

   public static boolean isInteger(String s)
   {
      int radix = 10;
      if(s.isEmpty()) return false;
      for(int i = 0; i < s.length(); i++) {
         if(i == 0 && s.charAt(i) == '-') {
            if(s.length() == 1) return false;
            else continue;
         }
         if(Character.digit(s.charAt(i),radix) < 0) return false;
      }
      return true;
   }

   public String retPropMethLabel(String c, String m)
   {
      while (true)
      {
         if(classMethMap.get(c).containsKey(m)) return(c + "_" + m);
         else
         {
            c = classMap.get(c);
            if(c.equals(""))  break;
         }
      }
      System.out.println("59, method not found even in parent classes.");
      return "";
   }
   public String st3(String s1, String s2, String s3)
   {
      return (s1 + "~" + s2 + "~" + s3);
   }
   public String st2(String s1, String s2)
   {
      return (s1 + "~" + s2);
   }

   int countOccurences(String s1, char c)
   {
      int count = 0;
      for(int i = 0; i < s1.length(); i++)
      {
         if(s1.charAt(i) == c)   count++;
      }
      return count;
   }

   public void build_methParamCountMap()
   {
      Set <String> cmkeys = methParamMap.keySet();

      for(String cm : cmkeys)
      {
         methParamCountMap.put(cm, Integer.toString(1 + countOccurences(methParamMap.get(cm), '~')));
      }
      return;
   }

//   boolean allDone()
//   {
//      Set <String> keys = cm0.keySet();
//      for(String k : keys)
//      {
//         if(!cmd.containsKey(k)) return false;
//      }
//      return true;
//   }
//
//   String getClass1()
//   {
//      Set <String> keys = cm0.keySet();
//      for(String k : keys)
//      {
//         if(!cmd.containsKey(k))
//         {
//            if(cm0.get(k).equals(""))  return k;
//            else
//            {
//               if(cmd.containsKey(cm0.get(k)))  return k;
//            }
//         }
////         if(cm0.get(k).equals(""))
////         {
////            if(!cmd.containsKey(k)) return k;
////         }
////         else
////         {
////            if(cmd.containsKey(cm0.get(k)))  return k;
////         }
//      }
//      return "";
//   }
//
//   public void build_cm4f()
//   {
//      Set <String> ckeys = cm1c.keySet();
//
//      for(String c : ckeys)
//      {
//         Set <String> fkeys = cm1c.get(c).keySet();
//
//         for(String f : fkeys)
//         {
//            cm4.put(st2(c, f), cm1c.get(c).get(f));
//         }
//      }
//      return;
//   }
//
//   public void build_cm4mv()
//   {
//      Set <String> ckeys = cm2c.keySet();
//
//      for(String c : ckeys)
//      {
//         Set <String> mkeys = cm2c.get(c).keySet();
//
//         for(String m : mkeys)
//         {
//            Set <String> vkeys = cm2c.get(c).get(m).keySet();
//
//            for(String v : vkeys)
//            {
//               cm4.put(st3(c,m,v), cm2c.get(c).get(m).get(v));
//            }
//         }
//      }
//      return;
//   }
//
//   public void build_cm3()
//   {
//      Set <String> ckeys = cm2c.keySet();
//
//      for(String c : ckeys)
//      {
//         int mOffset = 0;
//         Set <String> mkeys = cm2c.get(c).keySet();
//
//         for(String m : mkeys)
//         {
//            cm3.put(st2(c, m), Integer.toString(mOffset));
//            mOffset += 4;
//         }
//      }
//      return;
//   }
//
//   public void build_copy()
//   {
//      String c, p;
//
//      while (true)
//      {
//         //System.out.println("132");
//         c = getClass1();
//         if(c.equals(""))  break;
//         p = cm0.get(c);
//
//         if(p.equals(""))
//         {
//            cm1c.put(c, cm1.get(c));
//            cm2c.put(c, cm2.get(c));
//            cmd.put(c,"");
//         }
//         else
//         {
//            Hashtable <String, String> temp1 = (Hashtable<String, String>) (cm1c.get(p)).clone();
//            cm1c.put(c, temp1);
//            //cm1c.put(c, cm1c.get(p));
//            Set <String> keys1 = cm1.get(c).keySet();
//
//            for(String k1 : keys1)
//            {
//               if(!cm1c.get(c).containsKey(k1))
//               {
//                  int sz = cm1c.get(c).size();
//                  sz++;
//                  cm1c.get(c).put(k1, Integer.toString(4 * sz));
//                  //System.out.println("165, offset is " + Integer.toString(4 * sz));
//               }
//            }
//            Hashtable <String, Hashtable <String, String>> temp2 = (Hashtable<String, Hashtable<String, String>>)(cm2c.get(p)).clone();
//            cm2c.put(c, temp2);
////            cm2c.put(c, cm2c.get(p));
//            Set <String> keys2 = cm2.get(c).keySet();
//
//            for(String k2 : keys2)
//            {
//               cm2c.get(c).put(k2, cm2.get(c).get(k2));
//            }
//            cmd.put(c, "");
//         }
//      }
//      return;
//   }
//
//   String genArgTemp()
//   {
//      return ("TEMP " + Integer.toString(argTempCount++));
//   }
//
   String genTemp()
   {
      return ("TEMP " + Integer.toString(tempCount++));
   }

   String genLab()
   {
      return ("L" + Integer.toString(labCount++));
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String getReg()
   {
      return ("%_" + Integer.toString(regCount++));
   }
   public String getIfLab()
   {
      return ("if" + Integer.toString(ifCount++));
   }
   public String getLoopLab()
   {
      return ("loop" + Integer.toString(loopCount++));
   }

   void gen(String s)
   {
      System.out.print(s);
      return;
   }
   void genln(String s)
   {
      System.out.println(s);
      return;
   }
   public R visit(Goal n, A argu) {
      R _ret=null;

      gen("@." + mainClassName + "_vtable = global [0 x i8*] []");
      genln("");

      Set <String> ckeys = cm55.keySet();

      for(String c : ckeys)
      {
         int sz = cm55.get(c).size();
         String[] r = new String[sz];

         for(int i = 0; i < 8 * sz; i += 8)
         {
            Set <String> mkeys = cm55.get(c).keySet();

            for(String m : mkeys)
            {
               if(cm55.get(c).get(m).equals(Integer.toString(i)))
               {
                  String c1 = getParentWithMethod(c,m);
                  r[i/8] = signatureMap.get(st2(c1,m));
               }
            }
         }

         gen("@." + c + "_vtable = global [" + Integer.toString(sz) + " x i8*] [");
         for(int i = 0; i < sz; i++)
         {
            if(i != 0)     gen(", ");
            gen(r[i]);
         }
         genln("]");
      }

      genln("");
      gen("declare i8* @calloc(i32, i32)\n" +
              "declare i32 @printf(i8*, ...)\n" +
              "declare void @exit(i32)\n" +
              "\n" +
              "@_cint = constant [4 x i8] c\"%d\\0a\\00\"\n" +
              "@_cOOB = constant [15 x i8] c\"Out of bounds\\0a\\00\"\n" +
              "define void @print_int(i32 %i) {\n" +
              "    %_str = bitcast [4 x i8]* @_cint to i8*\n" +
              "    call i32 (i8*, ...) @printf(i8* %_str, i32 %i)\n" +
              "    ret void\n" +
              "}\n" +
              "\n" +
              "define void @throw_oob() {\n" +
              "    %_str = bitcast [15 x i8]* @_cOOB to i8*\n" +
              "    call i32 (i8*, ...) @printf(i8* %_str)\n" +
              "    call void @exit(i32 1)\n" +
              "    ret void\n" +
              "}\n" +
              "\n");


      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      className = (String) n.f1.f0.toString();
      mainClassName = (String) n.f1.f0.toString();
      regCount = 0;
      genln("define i32 @main() {");

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      //n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      genln("ret i32 0");
      genln("}");
      genln("");
      genln("");

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      className = "";
      methName = "";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      className = (String) n.f1.f0.toString();
      n.f2.accept(this, argu);
      methName = "";
      inClassVarDeclaration = true;
      n.f3.accept(this, argu);
      inClassVarDeclaration = false;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      className = (String) n.f1.f0.toString();
      n.f2.accept(this, argu);
      extendedClassName = (String) n.f3.f0.toString();
      n.f4.accept(this, argu);
      methName = "";
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String vType = (String) n.f0.accept(this, argu);
      IdentIsVarDecl = true;
      varName = (String) n.f1.accept(this, argu);
      IdentIsVarDecl = false;
      n.f2.accept(this, argu);
      if(inClassVarDeclaration)
      {
         fieldTypes.put(st2(className,varName), vType);
         return _ret;
      }
      genln("%" + varName + " = alloca " + vType);
      nonFieldTypes.put(st3(className,methName,varName), (vType + "*"));
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      regTypes.clear();
      regCount = 0;
      formalParameterCache = "";
      R _ret=null;
      n.f0.accept(this, argu);
      String retType = (String) n.f1.accept(this, argu);
      methName = (String) n.f2.f0.toString();
      gen("define " + retType + " @" + className + "." + methName + "(i8* %this");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      genln(") {");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      gen(formalParameterCache);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String eret = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      genln("ret " + regTypes.get(eret) + " " + eret);
      genln("}");
      genln("");
      genln("");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String pType = (String) n.f0.accept(this, argu);
      isFormalParam = true;
      varName = (String) n.f1.accept(this, argu);
      isFormalParam = false;
      gen(", " + pType + " %." + varName);
      formalParameterCache += ("%" + varName + " = alloca " + pType + "\n" + "store " + pType + " %." + varName + ", " + pType + "* %" + varName + "\n");
      nonFieldTypes.put(st3(className,methName,varName), (pType + "*"));
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      //n.f0.accept(this, argu);

      if(n.f0.which == 0)  _ret = (R) "i8*";
      else if(n.f0.which == 1) _ret = (R) "i1";
      else if(n.f0.which == 2) _ret = (R) "i32";
      else if(n.f0.which == 3) _ret = (R) "i8*";

      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      boolean isInMeth = false;
      R _ret=null;
      String lstr = (String) n.f0.f0.toString();
      if(isField(lstr))
      {
         String r = (String) n.f2.accept(this, argu);
         String l = (String) n.f0.accept(this, argu);
//         genln("875 l: " + l + " r: " + r);

         String lt = regTypes.get(l);
         String rt = regTypes.get(r);
//         genln("876 lt: " + lt + " rt: " + rt);

//         genln("store " + rt + " " + r + ", " + lt + "* " + l);
         genln("store " + rt + " " + r + ", " + rt + "* " + l);
      }
      else
      {
         String r = (String) n.f2.accept(this, argu);
         String rt = regTypes.get(r);
         String lt = nonFieldTypes.get(st3(className,methName,lstr));

//         genln("store " + rt + " " + r + ", " + lt + " %" + lstr);
         genln("store " + rt + " " + r + ", " + rt + "* %" + lstr);
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      boolean isInMeth = false;
      R _ret=null;
      isAssignIdent = true;
      String id = (String) n.f0.accept(this, argu);
      isAssignIdent = false;
//      if(cm4.containsKey(st3(className,methName,id))) isInMeth = true;
//      if(isInMeth)
//      {
//         id = cm4.get(st3(className,methName,id));
//         gen("HSTORE PLUS " + id);
//         gen(" PLUS 4 TIMES 4 ");
//         n.f1.accept(this, argu);
//         n.f2.accept(this, argu);
//         n.f3.accept(this, argu);
//         n.f4.accept(this, argu);
//         gen(" 0 ");
//         n.f5.accept(this, argu);
//         n.f6.accept(this, argu);
//      }
//      else
//      {
//         id = cm4.get(st2(className,id));
//         String s1 = genTemp();
//         String s2 = genTemp();
//
//         genln("MOVE " + s2);
//         genln("BEGIN ");
//         genln("HLOAD " + s1 + " TEMP 0 " + id);
//         genln("RETURN ");
//         genln(s1);
//         genln("END ");
//
//         gen("HSTORE PLUS " + s2);
//         gen(" PLUS 4 TIMES 4 ");
//         n.f1.accept(this, argu);
//         n.f2.accept(this, argu);
//         n.f3.accept(this, argu);
//         n.f4.accept(this, argu);
//         gen(" 0 ");
//         n.f5.accept(this, argu);
//         n.f6.accept(this, argu);
//      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      String l1 = genLab();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e1 = (String) n.f2.accept(this, argu);
      String ifa = getIfLab();
      String ifb = getIfLab();
      n.f3.accept(this, argu);
      genln("br i1 " + e1 + ", label %" + ifa + ", label %" + ifb);

      genln(ifa + ":");
      n.f4.accept(this, argu);
      genln("br label %" + ifb);
      genln(ifb + ":");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String l1 = genLab();
      String l2 = genLab();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e1 = (String) n.f2.accept(this, argu);
      String ifa = getIfLab();
      String ifb = getIfLab();
      String ifc = getIfLab();
      n.f3.accept(this, argu);
      genln("br i1 " + e1 + ", label %" + ifa + ", label %" + ifb);
      genln(ifa + ":");
      n.f4.accept(this, argu);
      genln("br label %" + ifc);
      n.f5.accept(this, argu);
      genln(ifb + ":");
      n.f6.accept(this, argu);
      genln("br label %" + ifc);
      genln(ifc + ":");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String lp0 = getLoopLab();
      String lp1 = getLoopLab();
      String lp2 = getLoopLab();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      genln("br label %" + lp0);
      genln(lp0 + ":");
      String e1 = (String) n.f2.accept(this, argu);
      genln("br i1 " + e1 + ", label %" + lp1 + ", label %" + lp2);
      n.f3.accept(this, argu);
      genln(lp1 + ":");
      n.f4.accept(this, argu);
      genln("br label %" + lp0);
      genln(lp2 + ":");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {      //TAKE CARE OF PRINTING BOOLEANS LATER!!!!
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      genln("call void (i32) @print_int(i32 " + e1 + ")");
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      String s = (String) _ret;
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i1");
      genln(e0 + " = and i1 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i1");
      genln(e0 + " = or i1 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i1");
      genln(e0 + " = icmp sle i32 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i1");
      //genln("1169");
//      if(regTypes.get(e1).equals("i1"))   genln(e0 + " = ne i1 " + e1 + ", " + e2);
//      else
         genln(e0 + " = icmp ne i32 " + e1 + ", " + e2);
      //genln("1172");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i32");
      genln(e0 + " = add i32 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      String e1t = regTypes.get(e1);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      String e2t = regTypes.get(e2);
      String e11 = e1;
      String e22 = e2;

      if(e1t.equals("i32*"))
      {
         e11 = getReg();
         genln(e11 + " = load i32, i32* " + e1);
      }
      if(e2t.equals("i32*"))
      {
         e22 = getReg();
         genln(e22 + " = load i32, i32* " + e2);
      }

      regTypes.put(e0, "i32");
      genln(e0 + " = sub i32 " + e11 + ", " + e22);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i32");
      genln(e0 + " = mul i32 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String e0 = getReg();
      _ret = (R) e0;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      regTypes.put(e0, "i32");
      genln(e0 + " = sdiv i32 " + e1 + ", " + e2);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String e0 = (String) n.f0.accept(this, argu);

      String e2 = getReg();
      String e3 = getReg();
      String e4 = getReg();
      String e5 = getReg();
      String e6 = getReg();

      regTypes.put(e2,"i32**");
      regTypes.put(e3, "i32*");
      regTypes.put(e4, "i32");
      regTypes.put(e5, "i32*");
      regTypes.put(e6, "i32");

      genln(e2 + " = bitcast i8* " + e0 + " to i32**");
      genln(e3 + " = load i32*, i32** " + e2);

      n.f1.accept(this, argu);
      String e1 = (String) n.f2.accept(this, argu);
      genln(e4 + " = add i32 " + e1 + ", 1");
      genln(e5 + " = getelementptr i32, i32* " + e3 + ", i32 " + e4);
      genln(e6 + " = load i32, i32* " + e5);
      _ret = (R) e6;
      n.f3.accept(this, argu);
      return (R) _ret;
   }

   public boolean isField(String v)
   {
      return !(cm4.containsKey(st3(className,methName,v)));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String e0 = (String) n.f0.accept(this, argu);

      String e2 = getReg();
      String e3 = getReg();
      String e5 = getReg();
      String e6 = getReg();

      regTypes.put(e2,"i32**");
      regTypes.put(e3, "i32*");
      regTypes.put(e5, "i32*");
      regTypes.put(e6, "i32");

      genln(e2 + " = bitcast i8* " + e0 + " to i32**");
      genln(e3 + " load i32*, i32** " + e2);

      genln(e5 + " = getelementptr i32, i32* " + e3 + ", i32 0");
      genln(e6 + " = load i32, i32* " + e5);
      _ret = (R) e6;

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) _ret;
   }
   String getObjType(String c, String v)
   {
      String p = classMap.get(c);
      while (true)
      {
         if(varMap.containsKey(st2(c,v)))    return varMap.get(st2(c,v));
         else
         {
            c = classMap.get(c);
            if(c.equals(""))  break;
         }
      }
      System.out.println("1025, object " + v + " not found even in parent classes.");
      return "";
   }
   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret = null;

      String epexp = (String) n.f0.accept(this,argu);
      //genln("1349 epexp's type is: " + regTypes.get(epexp) + " epexp: " + epexp);
      isMsgSnd = true;
      String pexp = (String) n.f0.accept(this,argu);
      isMsgSnd = false;

      String pexpType;
//      genln("1353 pexp: " + pexp);
      if(pexp.equals("this"))
      {
         pexp = className;
         pexpType = className;
         epexp = "%this";
      }
      else if(classMap.containsKey(pexp))   pexpType = pexp;
      else if(varMap.containsKey(st3(className,methName,pexp)))  pexpType = varMap.get(st3(className,methName,pexp));
      else pexpType = varMap.get(st2(className,pexp));


      String msgMeth = (String) n.f2.f0.toString();
//      genln("1360 pexpType: " + pexpType + " msgMeth: " + msgMeth);
      int methOff = Integer.parseInt(cm55.get(pexpType).get(msgMeth));
//      genln("1362");
      int methInd = methOff/8;

      String e0 = getReg();
      String e1 = getReg();
      String e2 = getReg();
      String e3 = getReg();
      String e4 = getReg();
      String e5 = getReg();

      genln(e0 + " = bitcast i8* " + epexp + " to i8***");
      genln(e1 + " = load i8**, i8*** " + e0);
      genln(e2 + " = getelementptr i8*, i8** " + e1 + ", i32 " + Integer.toString(methInd));
      genln(e3 + " = load i8*, i8** " + e2);
      gen(e4 + " = bitcast i8* " + e3 + " to ");

      String cm = st2(pexpType,msgMeth);

      String[] arr2 = methParamMap.get(cm).split("~");
      int sz = arr2.length;

      String r = "";
      String retType = methRetMap.get(cm);
      if(retType.equals("int"))  r += "i32 ";
      else if(retType.equals("int[]"))   r += "i8* ";      //Does this happen??(returning an array?)
      else if(retType.equals("boolean"))   r += "i1 ";
      else  r += "i8* ";

      r += "(";

      for(int i = 0; i < sz; i++)
      {
         if(i != 0) r += ", ";
         String pType = arr2[i];

         if(pType.equals("int"))   r += "i32";
         else if(pType.equals("int[]"))    r += "i8*";      //Does this happen??(array as parameter?)
         else if(pType.equals("boolean"))   r += "i1";
         else  r += "i8*";
      }

      r += ")*";
      genln(r);
      methParamCache = "i8* " + epexp + " ";
      n.f4.accept(this,argu);
      String r1 = "";if(retType.equals("int"))  r1 += "i32 ";
      else if(retType.equals("int[]"))   r1+= "i8* ";      //Does this happen??(returning an array?)
      else if(retType.equals("boolean"))   r1 += "i1 ";
      else  r1 += "i8* ";
      genln(e5 + " = call " + r1 + " " + e4 + " (" + methParamCache + ")");
      regTypes.put(e5,r1.substring(0,r1.length()-1));
      _ret = (R) e5;
      return (R) _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      methParamCache += (", " + regTypes.get(e1) + " " + e1);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1 = (String) n.f1.accept(this, argu);
      methParamCache += (", " + regTypes.get(e1) + " " + e1);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String e0 = getReg();
      regTypes.put(e0, "i32");
      genln(e0 + " = add i32 0, " + ((String) n.f0.tokenImage));
      _ret = (R) e0;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e0 = getReg();
      regTypes.put(e0, "i1");
      genln(e0 + " = or i1 1, 1");
      _ret = (R) e0;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e0 = getReg();
      regTypes.put(e0, "i1");
      genln(e0 + " = or i1 0, 0");
      _ret = (R) e0;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret = null;
      String s = (String) n.f0.tokenImage;
      if(isArrLkp) return (R) s;
      if(isAssignIdent) return (R) s;
      if(isMsgSndPexp)   return (R) s;
      if(isMsgSnd)   return (R) s;
      if(isFormalParam) return (R) s;
      if(IdentIsVarDecl) return (R) s;

      if(isField(s))
      {
         String e0 = getReg();
         regTypes.put(e0, "i8*");
         String offv = cm44.get(st2(className,s));
         //genln("1489, className: " + className + ", s: " + s + ", offv: " + offv);
         genln(e0 + " = getelementptr i8, i8* %this, i32 " + offv);
         String e1 = getReg();
         genln(e1 + " = bitcast i8* " + e0 + " to " + fieldTypes.get(st2(className,s)) + "*");
         regTypes.put(e1, (fieldTypes.get(st2(className,s)) + "*"));
         _ret = (R) e1;
         return _ret;
      }
      else
      {
         String nft = nonFieldTypes.get(st3(className,methName,s));
         String nftsmall = nft.substring(0, nft.length()-1);
         String e1 = getReg();
         genln(e1 + " = load " + nftsmall + ", " + nft + " %" + s);
         regTypes.put(e1, nftsmall);
         //??????????
         _ret = (R) e1;
         return _ret;
      }
//      _ret = (R) s;
//      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "this";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String e0 = (String) n.f3.accept(this, argu);
      String e1 = getReg();
      String e2 = getReg();
      String e3 = getReg();

      genln(e1 + " = add i32 " + e0 + ", 1");
      genln(e2 + " = @calloc(i32 4, i32 " + e1 + ")");
      genln(e3 + " = bitcast i8* to i32*");
      genln("store i32 " + e0 + ", " + e3);
      _ret = (R) e3;
      regTypes.put(e3, "i32*");

      return (R) _ret;
   }
//   public R visit(ArrayAllocationExpression n, A argu) {
//      R _ret=null;
//      String arrSize = genTemp();
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      gen("HALLOCATE PLUS 4 TIMES 4 ");
//      genln("BEGIN ");
//      genln("MOVE " + arrSize + " ");
//      arrSize = (String) n.f3.accept(this, argu);
//      genln("");
//      genln("RETURN ");
//      genln(arrSize);
//      genln("END ");
//      n.f4.accept(this, argu);
//      String count = genTemp();
//
//
//
//      return (R) "int[]";
//   }
   int getNumFields(String c)
   {
      return cm1c.get(c).size();
   }

   int getNumMethods(String c)
   {
      return cm3f.get(c).size();
   }
   void CreateObject(String c)
   {
      String startField = genTemp();
      String startMeth = genTemp();

      genln("BEGIN");
      genln("MOVE " + startField + " HALLOCATE " + Integer.toString(4 * (1 + getNumFields(c))));
      genln("MOVE " + startMeth + " HALLOCATE " + Integer.toString(4 * (getNumMethods(c))));

      genln("");
      Set <String> mkeys = cm3f.get(c).keySet();

      for(String m : mkeys)
      {
         genln("HSTORE " + startMeth + " " + cm3.get(st2(c,m)) + " " + retPropMethLabel(c,m));
      }
      genln("");

      Set <String> fkeys = cm1c.get(c).keySet();

      for(String f : fkeys)
      {
         genln("HSTORE " + startField + " " + cm4.get(st2(c,f)) + " 0 ");
      }
      genln("");

      genln("HSTORE " + startField + " 0 " + startMeth);
      genln("RETURN ");
      genln(startField);
      genln("END ");
   }
   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      String cn = (String) n.f1.f0.toString();
      if(isMsgSnd) return (R) cn;
      String numMeth = Integer.toString(getNumMethods(cn));
      R _ret=null;
      n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      String e0 = getReg();
      String e1 = getReg();
      String e2 = getReg();

      genln(e0 + " = call i8* @calloc(i32 1, i32 " + Integer.toString(classSize.get(cn)) + ")");
      genln(e1 + " = bitcast i8* " + e0 + " to i8***");
      genln(e2 + " = getelementptr [" + numMeth + " x i8*], [" + numMeth + " x i8*]* @." + cn + "_vtable, i32 0, i32 0");
      genln("store i8** " + e2 + ", i8*** " + e1);

      regTypes.put(e0, "i8*");
      _ret = (R) e0;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1 = (String) n.f1.accept(this, argu);
      String e0 = getReg();
      regTypes.put(e0, "i1");
      genln(e0 + " = xor i1 1, " + e1);
      _ret = (R) e0;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
